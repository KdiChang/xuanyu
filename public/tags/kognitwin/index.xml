<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kognitwin on Goldydocs</title>
    <link>http://localhost:1313/tags/kognitwin/</link>
    <description>Recent content in Kognitwin on Goldydocs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kognitwin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EDW Import from scratch</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-import-from-scratch/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-import-from-scratch/</guid>
      <description>目标 - EDW Import and search config from scratch 下载数据 EDW&#xA;Put the files into local folder C:\Cogs\KDI\cn\zilong\edw&#xA;ktw add source&#xA;ktw add source cn:zilong:edw 修改import-zilong-edw.ts， importPipeline添加任务 - importEdw&#xA;参考import-zilong-edw.ts&#xA;search index 配置 &amp;quot;cn:zilong:edw:tag&amp;quot; and &amp;quot;cn:zilong:edw:doc&amp;quot; in hello-projects.json&#xA;参考hello-projects.json&#xA;import EDW to mongdb&#xA;ktw import -s cn:zilong -t edw mongdb查看结果 db = db.getSiblingDB(&amp;#34;twin&amp;#34;); db.getCollection(&amp;#34;assets&amp;#34;).find({source: &amp;#39;cn:zilong:edw&amp;#39;}); import configuration file for search features \Twin.hello&amp;gt;ktw import hello-projects.json 访问localhost </description>
    </item>
    <item>
      <title>Generating realtime data</title>
      <link>http://localhost:1313/docs/product/kognitwin/generating-realtime-data/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/generating-realtime-data/</guid>
      <description>objective - Generating realtime data to influxdb create task pushDummyRealtimeValues to generate realtime dummy data eg:&#xA;await context.importPipeline(&amp;#39;rt&amp;#39;, { id: &amp;#39;cn:zilong:import:rt&amp;#39;, name: &amp;#39;Cn Zilong Rt Import Pipeline&amp;#39;, tasks: [ { &amp;#39;id&amp;#39;: &amp;#39;push_dummy_realtime_values_emissions&amp;#39;, &amp;#39;task&amp;#39;: &amp;#39;pushDummyRealtimeValues&amp;#39;, triggers: { // like /3 run for every 3 minutes &amp;#34;schedule&amp;#34;: &amp;#34;0 */3 * * * *&amp;#34; }, &amp;#39;configuration&amp;#39;: { &amp;#39;source&amp;#39;: &amp;#39;cn:zilong:rt&amp;#39;, &amp;#39;isTaskRunningDuration&amp;#39;: { &amp;#39;seconds&amp;#39;: 10 }, &amp;#39;intervalinMS&amp;#39;: 6000, &amp;#39;forLast&amp;#39;: { &amp;#39;minutes&amp;#39;: 1 }, &amp;#39;tagList&amp;#39;: [ { &amp;#39;tag&amp;#39;: &amp;#39;LAYER_WM100-EQUI&amp;#39;, &amp;#39;range&amp;#39;: { &amp;#39;min&amp;#39;: 0, &amp;#39;max&amp;#39;: 100 } } ], &amp;#39;fromDate&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;toDate&amp;#39;: &amp;#39;&amp;#39; }, } ], }, { /** * Decide if we should: * - false: Break down the pipelines into tasks and run them individually.</description>
    </item>
    <item>
      <title>How-to-solve-npm-i-e401</title>
      <link>http://localhost:1313/docs/product/kognitwin/tips/how-to-solve-npm-i-e401/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/tips/how-to-solve-npm-i-e401/</guid>
      <description>When we run npm getting-started or npm i under Twin or ktw new workspace YOUR_WORKSPACE, we most likely encounter the error 401: not having permission issue, this is due to no access to Azure devops.&#xA;Solution: for example, if the package.json has below dependencies: &amp;#34;dependencies&amp;#34;: { &amp;#34;@azure-tools/azcopy-node&amp;#34;: &amp;#34;^2.5.0&amp;#34;, &amp;#34;@kognitwin/cli&amp;#34;: &amp;#34;^1.0.473&amp;#34;, &amp;#34;@kognitwin/common&amp;#34;: &amp;#34;^1.0.473&amp;#34;, &amp;#34;@kognitwin/import-task-configs&amp;#34;: &amp;#34;^1.0.365&amp;#34;, &amp;#34;@kognitwin/sdk&amp;#34;: &amp;#34;^1.0.473&amp;#34;, &amp;#34;@kognitwin/task-configs&amp;#34;: &amp;#34;^1.0.411&amp;#34;, &amp;#34;lodash&amp;#34;: &amp;#34;^4.17.20&amp;#34; }, Remove all @kognitwin/* dependencies since we do not have access.</description>
    </item>
    <item>
      <title>镜像部署check list</title>
      <link>http://localhost:1313/docs/product/kognitwin/infra/%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2check-list/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/infra/%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2check-list/</guid>
      <description>twinservice 镜像 部署完毕后，访问https://THE_TWIN_URL/api/ready 会显示 ready, 如： 该镜像的log不应该有error。 twin 镜像 部署完毕后，浏览器打开Debugger, 找到包含main.***.js的请求并在新页面访问https://THE_TWIN_URL/main.***.js。确定其status是200，而且页面会显示该js， 该js大小约1Mb, 如： 。 请确保该页面的请求时间小于4s. twinadmin 镜像 部署完毕后，浏览器打开Debugger, 找到包含main..js的请求并在新页面访问https://THE_TWIN_ADMIN_URL/main..js。确定其status是200，而且页面会显示该js， 该js大小约8Mb, 如： 。 请确保该页面的请求时间小于4s. 访问https://poc.kognitwin.cn/api/files/ 确定其status是200，返回应是array 其他镜像请确保log没有错误 </description>
    </item>
    <item>
      <title>How to Run LNG in Local Environment</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-run-lng-in-local-environment/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-run-lng-in-local-environment/</guid>
      <description>本地环境如何跑 LNG&#xA;poetry &amp;gt;=1.2.2 Install poetry from official docs&#xA;run (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python - in Windows (Powershell)&#xA;tip: Python &amp;gt;=3.8.1 如何安装 &amp;amp; 切换 Python 版本可参考条目 5.5&#xA;run poetry install under c/repos/Twin/taskworkers/lng-workers/simulation-worker&#xA;poetry run runMain under c/repos/Twin/taskworkers/lng-workers/simulation-worker&#xA;install https://github.com/pyenv-win/pyenv-win&#xA;run pip install pyenv-win --target %USERPROFILE%\\.pyenv&#xA;tip: pip 可以随安装 python 一起安装&#xA;run https://kdic.coding.net/p/lngzhuhaijiangsu/d/lng-python-logic/git/tree/master/rpyc/rpyc-server.py&#xA;5.1 run pip install rpyc&#xA;5.2 install k-spice and 模型&#xA;[k-spice](https://dbinsp-my.sharepoint.com/:u:/g/personal/changli_hao_kongsbergdigital_com/EeXoAhAFWCpOn1FE3ggfjC0BIYFPYkQoeX-NdxJF0yIDuw?e=mUjkkb)&#xD;[模型](https://dbinsp-my.sharepoint.com/:u:/g/personal/changli_hao_kongsbergdigital_com/EXSZ4zXwudZEo7tj1cP5yp4BRzdafq2l1a9l53fibb8WCw?e=HRRSCh)&#xD;5.3 download kspice.cp11-win_amd64.pyd&#xA;5.4 paste it to K-Spice install bin64</description>
    </item>
    <item>
      <title>How to set up Postman to connect tencent dev poc environment</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/how-to-set-up-postman-to-connect-tencent-dev-poc-environment/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/how-to-set-up-postman-to-connect-tencent-dev-poc-environment/</guid>
      <description>objective - How to set up Postman to connect tencent dev poc environment Download it from postman&#xA;Collection with authentication configuration Download the default authorized collection json-file: TwinAuthorized.postman_collection.json&#xA;In the Postman toolbar, click the Import button&#xA;set variables&#xA;baseAuthUrl: https://auth.ops.kognitwin.cn tenantId: dev-poc clientId: twin-frontend realm: dev-poc baseUrl: https://dev.poc.kognitwin.cn/api config authorization - configure new token Grant Type: Authorization Code Callback URL: https://dev.poc.kognitwin.cn/ Auth URL: {{baseAuthUrl}}/realms/{{realm}}/protocol/openid-connect/auth Access Token URL: {{baseAuthUrl}}/realms/dev-poc/protocol/openid-connect/token Scope: openid click the &amp;lsquo;Get New Access Token&amp;rsquo; button, Enter your email and credentials (if required) and continue the login formalities Press the &amp;lsquo;Use Token&amp;rsquo; button get assets get timeseries post timeseries reference internal doc postman</description>
    </item>
    <item>
      <title>HowtodebugNodeJs</title>
      <link>http://localhost:1313/docs/product/kognitwin/tips/howtodebugnodejs/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/tips/howtodebugnodejs/</guid>
      <description>在执行这行命令:ktw import -s root in /tutorial/hello or /Twin.KDI，如果遇到如下问题 (附nodejs调试方法)&#xA;1）在/Twin/cli/下全局搜索&amp;rsquo;result:&amp;rsquo;,定位到是这里报错&#xA;VS Code, Terminal - New Terminal, 选择Twin repo(要选择调试代码的repo，否则进不了断点) 3)javascript debug terminal，选择Twin.KDI or /tutorial/hello/ (选择其他的会报错 - [ERROR] Import command can&amp;rsquo;t be run outside of a ktw workspace.)&#xA;4)标记断点&#xA;断点标记 vs debugger 两种方式都可以 VSCode 行号左侧的小红点就是断点标记，表示程序执行到这一行就会停下来&#xA;5)执行ktw import -s root进入断点&#xA;问题出在context.client.apiUrl - &amp;lsquo;https://hello.localdev.me/api/&#39; 7)发现/tutorial/hello/的ktw运行环境ktw.json，默认为https://hello.localdev.me/api/,但是本地并没有启动这个服务&#xA;8)通过ktw帮助命令行， ktw import -h， 可以通过-e指定运行环境&#xA;ktw import -s root -e local</description>
    </item>
    <item>
      <title>How to backup and restore mongodb</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-backup-and-restore-mongodb/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-backup-and-restore-mongodb/</guid>
      <description>This guide will show you how to backup all mongodb collections from a container and restore them to another container Note: This guide is using Rancher Desktop, for docker, it is similar, one only need to change nerdctl to docker in below commands: Guide: Backup&#xA;Get into the mongo container you want to backup: # list the mongo container id nerdctl container ls nerdctl exec -it 86c31157db5a bash # run below cmd inside the container mongodump --gzip --archive &amp;gt; dump_`date &amp;#34;+%Y-%m-%d&amp;#34;`.</description>
    </item>
    <item>
      <title>Howto查看MongoDB数据库内容</title>
      <link>http://localhost:1313/docs/product/kognitwin/tips/howto%E6%9F%A5%E7%9C%8Bmongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/tips/howto%E6%9F%A5%E7%9C%8Bmongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%85%E5%AE%B9/</guid>
      <description></description>
    </item>
    <item>
      <title>Huldra Import (Import a 3D Model) from scratch</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/huldra-import-import-a-3d-model-from-scratch/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/huldra-import-import-a-3d-model-from-scratch/</guid>
      <description>目标 - Huldra Import (Import a 3D Model) from scratch Install Kognitwin CLI - ktw Local build&#xA;you can automatically build and install the CLI using the cli script in the Twin repository:&#xA;Twin&amp;gt; npm run cli Create new workspace using Kognitwin CLI 2.1 Create a new workspace hello using template hello in local folder /tutorial. You can use whatever you want as the local folder.&#xA;mkdir /tutorial cd /tutorial ktw new workspace hello --template hello 2.</description>
    </item>
    <item>
      <title>How to create node-opcua server image</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-create-node-opcua-server-image/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-create-node-opcua-server-image/</guid>
      <description>How to create node-opcua server image&#xA;Background 在做实时计算模块时，需要用到 node-opcua 库做为数据源提供实时数据。在本地实现的时候，可以用 localhost 地址作为数据源的接入。但是当 Kognitwin 部署到 dev 环境时，就需要提供一个 node opcua server 的外网地址作为数据源接入。因此将一个 node.js 的应用装入到 docker 容器中， 然后部署到云环境就成为了一种可行的解决方式。&#xA;How to use it create Node.js web app&#xA;1.1 create package.json file, eg:&#xA;```json&#xD;{&#xD;&amp;quot;name&amp;quot;: &amp;quot;docker_web_app&amp;quot;,&#xD;&amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,&#xD;&amp;quot;description&amp;quot;: &amp;quot;Node.js on Docker&amp;quot;,&#xD;&amp;quot;author&amp;quot;: &amp;quot;First Last &amp;lt;first.last@example.com&amp;gt;&amp;quot;,&#xD;&amp;quot;main&amp;quot;: &amp;quot;sample_server.js&amp;quot;,&#xD;&amp;quot;scripts&amp;quot;: {&#xD;&amp;quot;start&amp;quot;: &amp;quot;node sample_server.js&amp;quot;&#xD;},&#xD;&amp;quot;dependencies&amp;quot;: {&#xD;&amp;quot;node-opcua&amp;quot;: &amp;quot;2.103.0&amp;quot;&#xD;}&#xD;}&#xD;```&#xD;1.2 npm install</description>
    </item>
    <item>
      <title>README</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/readme/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/readme/</guid>
      <description>How to 根据 KDIC的 KDIC Onboarding Plan.xlsx 的内容走，对于每一个week plan(就是每一个tab)，有一些补充信息，请参考， 如 关于Week1 信息 KTW 文档： https://internal.docs.kognitwin.com/&#xA;KDI使用Slack答疑：https://internal.docs.kognitwin.com/academy/introduction/slack_onboarding/&#xA;软件环境： 完整的Kognitwin产品，主要用来内外部测试演示，由KDI负责维护： https://dev.kdi.kognitwin.com/&#xA;完整的Kognitwin产品，主要是KDIC用来内外部测试演示，由KDIC负责维护：https://dev.poc.kognitwin.cn/&#xA;缩略词： KDIC: Kongsberg Digital China&#xA;KTW: Kognitwin&#xA;ref: Onboarding plan from KDI (Kongsberg Digital)</description>
    </item>
    <item>
      <title>edw links to pnid</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-links-to-pnid/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-links-to-pnid/</guid>
      <description>objective - edw links to pnid create cn-context-menu.json ref: cn-context-menu.json&#xA;create template contextMenu in hello-projects.json ref: hello-projects.json&#xA;some changes in zilong-workflows-main.json 3.1 change template context menu id - &amp;quot;id&amp;quot;: &amp;quot;cn:contextMenu&amp;quot;&#xA;3.2 add &amp;quot;slotsControlMode&amp;quot;: &amp;quot;implicit&amp;quot; in layout of content&#xA;3.3 add document template in components&#xA;{ &amp;#34;id&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;template&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;no:documentviewer&amp;#34;, &amp;#34;parameters&amp;#34;: { &amp;#34;defaultId&amp;#34;: &amp;#34;-&amp;#34;, &amp;#34;componentId&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;actionScope&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;navigationScope&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;messageSource&amp;#34;: &amp;#34;process-view&amp;#34;, &amp;#34;currentScope&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;oppositeScope&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;defaultNavMessagesOff&amp;#34;: false, &amp;#34;allowedToDrawAndEdit&amp;#34;: true } } } ref: zilong-workflows-main.</description>
    </item>
    <item>
      <title>How to create user and roles</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-create-user-and-roles/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-create-user-and-roles/</guid>
      <description>How to create user and roles&#xA;create &amp;quot;id&amp;quot;: &amp;quot;poc_nyh_read_user&amp;quot;, roles&#xA;ref: hello-roles-read-nyh.json&#xA;创建账号的两种方式&#xA;2.1 方式一： 自己创建用户 （推荐）&#xA;1. run `ktw add user` cmd. eg:&#xD;```sh&#xD;ktw add user testuser1 --roles poc_nyh_read_user&#xD;```&#xD;```json&#xD;{&#xD;&amp;quot;users&amp;quot;: [&#xD;{&#xD;&amp;quot;type&amp;quot;: &amp;quot;user&amp;quot;,&#xD;&amp;quot;email&amp;quot;: &amp;quot;testuser1&amp;quot;,&#xD;&amp;quot;name&amp;quot;: &amp;quot;firstName lastName&amp;quot;,&#xD;&amp;quot;roles&amp;quot;: [&#xD;&amp;quot;poc_nyh_read_user&amp;quot;&#xD;],&#xD;&amp;quot;idp&amp;quot;: &amp;quot;keycloak&amp;quot;,&#xD;&amp;quot;idpLink&amp;quot;: &amp;quot;kdi_azuread&amp;quot;&#xD;}&#xD;]&#xD;}&#xD;```&#xD;2. run `ktw import` cmd. eg: ```sh&#xD;ktw import hello-users.json -e dev-tencent&#xD;```&#xD;ref: [hello-users.</description>
    </item>
    <item>
      <title>How to deploy to another environment</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-deploy-to-another-environment/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-deploy-to-another-environment/</guid>
      <description>For example, if target is&#xA;kognitwin:https://poc.kognitwin.cn keycloak: https://login.poc.kognitwin.cn/ run ktw add environmentcmd. eg:&#xA;ktw add environment poc-a https://poc.kognitwin.cn/api --idp=keycloak --tenantId dev-poc --clientId twin-devicelogin --authServerUrl https://login.poc.kognitwin.cn/ then for deploying to the target, run normal ktw import cmd plus -e poc-a at the end.</description>
    </item>
    <item>
      <title>importPnID</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/importpnid/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/importpnid/</guid>
      <description>DiagramParser Use the TestViewer in internal viewer to read PnID(we do not have access to Azure Devops) Get familiar with TestViewer How to use task importDocuments to import pnid Need to get ImageMagic dependency. The Configuration in https://internal.docs.kognitwin.com/docs/development/tasks/import/pnid/ could be auto generated by: ktw add scope cn:hello ktw add source cn:hello:pnid One needs to understand the finder.json which is a must-to-have file to config what to ipmort to mongoDB. finderdef_examples 目标1：pdf导入mongodb 下载pdf文件。 Keep only 1301-PWells_1-4.</description>
    </item>
    <item>
      <title>How to run Kognitwin using Rancher Desktop</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-run-kognitwin-using-rancher-desktop/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-run-kognitwin-using-rancher-desktop/</guid>
      <description>How to run Kognitwin using Rancher Desktop&#xA;download rancher desktop to your PC official website&#xA;Start Mongo container, eg: nerdctl pull mongo​​:6.0 nerdctl run --name twin-mongodb --restart=always -p 27017:27017 -d mongo:6.0 Start Redis container, eg: nerdctl pull redis​:7.0 nerdctl run --name twin-redis --restart=always -d -p 6379:6379 redis​:7.0 Start influx container, eg: nerdctl pull influxdb:1.8 nerdctl run --name influx --restart=always -p 8086:8086 influxdb:1.8 Note: if you notice an error with server failing to connect with MongoDb at localhost:27017.</description>
    </item>
    <item>
      <title>influxdb emission management depoly tencent poc</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management-depoly-tencent-poc/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management-depoly-tencent-poc/</guid>
      <description>objective - deploy emissions management in tencent poc add environment tencent poc run ktw add environmentcmd. eg:&#xA;ktw add environment t https://dev.poc.kognitwin.cn/api --idp=keycloak --tenantId dev-poc --clientId twin-devicelogin --authServerUrl https://auth.ops.kognitwin.cn/ import workflow run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-workflows-emission-management.json -e t ref: hello-workflows-emission-management.json&#xA;import template run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-templates-nz-emission-management.json -e t ref: hello-templates-nz-emission-management.json&#xA;change server influx host to influxdb.default, then import sources run ktw importcmd. eg:&#xA;ktw import cn\zilong\zilong-rt.</description>
    </item>
    <item>
      <title>How to send messges</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-send-messges/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-send-messges/</guid>
      <description>Reload search config msg: Requisite the search service need to be running { &amp;#34;subject&amp;#34;: &amp;#34;admin:search&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;&amp;#39;com.kognitwin.search.reloadConfig.v1&amp;#39;&amp;#34; } </description>
    </item>
    <item>
      <title>influxdb emission management</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management/</guid>
      <description>objective - run emissions management import workflow run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-workflows-emission-management.json then change source to &amp;quot;source&amp;quot;: &amp;quot;cn:zilong:rt&amp;quot;&#xA;ref: hello-workflows-emission-management.json&#xA;import template run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-templates-nz-emission-management.json ref: hello-templates-nz-emission-management.json&#xA;Register the sensors run ktw importcmd. eg:&#xA;ktw import cn\zilong\test-rta-assets.json ref: test-rta-assets.json&#xA;Use task pushDummyRealtimeValues to generate dummy data run ktw importcmd. eg:&#xA;ktw import -s cn:zilong -t rt -e local ref: import-zilong-rt.ts&#xA;result images notes: 6.1 最基础的版本，点击右侧指标，左侧chart展示的逻辑 通过 redis 的 pub sub， &amp;quot;message&amp;quot;: &amp;quot;SetWorkflowParameter&amp;quot;, 通过trigger loadScene方法实现的</description>
    </item>
    <item>
      <title>How to set up search feature</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-set-up-search-feature/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-set-up-search-feature/</guid>
      <description>How to set up search feature Add a search template to project.templates. eg(the source, id &amp;hellip; need to be updated 替换 source: teams:viz:hul:v3d 为项目定义的source Index 的 key: teams:viz:hul:v3d是该index的识别id，建议根据模板修改&#xA;): { &amp;#34;search&amp;#34;: { &amp;#34;indexes&amp;#34;: { &amp;#34;cn:zilong:v3d&amp;#34;: { &amp;#34;query&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;cn:zilong:v3d&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;PIPE,VALV,EQUI,INST,PCOM,SUBE,FILT,SHU,ATTA,FLAN,NOZZ,MECH,STRU,ELEC,PSUP,HVAC,SAFE,TELE,ARCH&amp;#34; }, &amp;#34;projection&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;source&amp;#34;, &amp;#34;derived&amp;#34; ], &amp;#34;flexDoc&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;id&amp;#34;, &amp;#34;field&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34; ], &amp;#34;store&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;source&amp;#34;, &amp;#34;derived&amp;#34; ] }, &amp;#34;options&amp;#34;: { &amp;#34;boostFields&amp;#34;: { &amp;#34;id&amp;#34;: 5 } } }, &amp;#34;cn:zilong:edw:tag&amp;#34;: { &amp;#34;query&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;cn:zilong:edw&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;Tag&amp;#34; }, &amp;#34;projection&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;source&amp;#34;, &amp;#34;derived&amp;#34; ], &amp;#34;flexDoc&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;id&amp;#34;, &amp;#34;field&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34; ], &amp;#34;store&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;source&amp;#34;, &amp;#34;derived&amp;#34; ] }, &amp;#34;options&amp;#34;: { &amp;#34;boostFields&amp;#34;: { &amp;#34;id&amp;#34;: 5 } } }, &amp;#34;cn:zilong:edw:doc&amp;#34;: { &amp;#34;query&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;cn:zilong:edw&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;Document&amp;#34; }, &amp;#34;projection&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;source&amp;#34;, &amp;#34;derived&amp;#34; ], &amp;#34;flexDoc&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;id&amp;#34;, &amp;#34;field&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34; ], &amp;#34;store&amp;#34;: [ &amp;#34;id&amp;#34;, &amp;#34;type&amp;#34;, &amp;#34;source&amp;#34;, &amp;#34;derived&amp;#34; ] }, &amp;#34;options&amp;#34;: { &amp;#34;boostFields&amp;#34;: { &amp;#34;id&amp;#34;: 5 } } } } } } 参考hello-projects.</description>
    </item>
    <item>
      <title>pnid import from scratch</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/pnid-import-from-scratch/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/pnid-import-from-scratch/</guid>
      <description>目标1 pdf导入mongodb 下载pdf文件。Keep only 1301-PWells_1-4.pdf and 1301-PWells_5-8.pdf under C:\Cogs\KDI\cn\zilong\pnid. (1301-PWells_1-4.pdf)[https://dbinsp.sharepoint.com/:b:/r/sites/KDIASKDIChina-SolutionandDev/Shared%20Documents/Solution%20and%20Dev/11_Dev/KTW%20onboarding/importPnid/1301-PWells_1-4.pdf?csf=1&amp;amp;web=1&amp;amp;e=4lCkBX] (1301-PWells_5-8.pdf)[https://dbinsp.sharepoint.com/:b:/r/sites/KDIASKDIChina-SolutionandDev/Shared%20Documents/Solution%20and%20Dev/11_Dev/KTW%20onboarding/importPnid/1301-PWells_5-8.pdf?csf=1&amp;amp;web=1&amp;amp;e=HzDfha] 运行ktw add source 命令 ktw add source cn:zilong:pnid 创建正则表达式标注pdf文件 keep demoFinder.json under C:\Cogs\KDI\cn\zilong\configs demoFinder.json&#xA;修改import-demo-pnid.ts， 参数inputDir, outputDir, finderFileDir, analyzerConfig 参考import-demo-pnid.ts&#xA;在.env配置BINARY_SEARCH_PATHS（本地环境依赖） 参考.env&#xA;pdf文件导入mongdb, 运行ktw import 命令&#xA;ktw import -s cn:zilong -t pnid -e local 效果图 目标2 - pdf在页面显示 创建workflows and templates&#xA;1.1 参考 demo-pnid-workflows-test.json&#xA;1.2 参考 demo-pnid-no-documentviewer.json&#xA;执行导入&#xA;ktw import cn\zilong\demo-pnid-workflows-test.json -e local ktw import cn\zilong\demo-pnid-no-documentviewer.json -e local 查看网页</description>
    </item>
    <item>
      <title>How to use OpenDialog in realtime calculator</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-use-opendialog-in-realtime-calculator/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-use-opendialog-in-realtime-calculator/</guid>
      <description>How to use OpenDialog in realtime calculator&#xA;config triggers.contextmenu in rta-rcd-components.json. eg:&#xA;&amp;#34;contextmenu&amp;#34;: { &amp;#34;message&amp;#34;: &amp;#34;ShowContextMenu&amp;#34;, &amp;#34;value&amp;#34;: { &amp;#34;event&amp;#34;: &amp;#34;$event&amp;#34;, &amp;#34;syncAsset&amp;#34;: true, &amp;#34;asset&amp;#34;: &amp;#34;$clicked&amp;#34;, &amp;#34;template&amp;#34;: { &amp;#34;items&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;查看历史数据&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;OpenDialog&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;info_outline&amp;#34;, &amp;#34;value&amp;#34;: { &amp;#34;template&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:rcd:dialog:chart:demo&amp;#34;, &amp;#34;parameters&amp;#34;: { &amp;#34;asset&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;$clicked.id&amp;#34;, &amp;#34;source&amp;#34;: &amp;#34;$clicked.source&amp;#34; } } } } } ] } } }, ref: rta-rcd-components.json&#xA;config template &amp;quot;id&amp;quot;: &amp;quot;teams:rta:rcd:dialog:chart:demo&amp;quot; in rta-rcd-dialogs.json. eg:&#xA;{ &amp;#34;id&amp;#34;: &amp;#34;teams:rta:rcd:dialog:chart:demo&amp;#34;, &amp;#34;parameters&amp;#34;: { &amp;#34;asset&amp;#34;: true }, &amp;#34;defaults&amp;#34;: {}, &amp;#34;variables&amp;#34;: {}, &amp;#34;dialog&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;$id&amp;#34;, &amp;#34;component&amp;#34;: &amp;#34;DynamicLayoutDialogComponent&amp;#34;, &amp;#34;panelClass&amp;#34;: [&amp;#34;w-1/2&amp;#34;], &amp;#34;data&amp;#34;: { &amp;#34;layout&amp;#34;: { &amp;#34;type&amp;#34;: &amp;#34;DynamicLayoutComponent&amp;#34;, &amp;#34;components&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;chart&amp;#34;, &amp;#34;splitLayout&amp;#34;: { &amp;#34;displayName&amp;#34;: &amp;#34;Chart View&amp;#34;, &amp;#34;displayIcon&amp;#34;: &amp;#34;show_chart&amp;#34;, &amp;#34;isVisible&amp;#34;: false }, &amp;#34;cssClasses&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;ChartGridViewComponent@2&amp;#34;, &amp;#34;resizable&amp;#34;: { &amp;#34;axis&amp;#34;: &amp;#34;x&amp;#34;, &amp;#34;position&amp;#34;: &amp;#34;end&amp;#34; }, &amp;#34;parameters&amp;#34;: [ &amp;#34;rowHeight&amp;#34;, &amp;#34;cols&amp;#34;, &amp;#34;rtAssetId&amp;#34;, &amp;#34;rtAssetSource&amp;#34; ], &amp;#34;defaults&amp;#34;: { &amp;#34;rowHeight&amp;#34;: &amp;#34;notfit&amp;#34;, &amp;#34;cols&amp;#34;: 1, &amp;#34;rtAssetId&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;rtAssetSource&amp;#34;: &amp;#34;&amp;#34; }, &amp;#34;layoutConfig&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Charts View&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;show_chart&amp;#34; }, &amp;#34;inputs&amp;#34;: { &amp;#34;gridConfig&amp;#34;: { &amp;#34;cols&amp;#34;: &amp;#34;$parameters.</description>
    </item>
    <item>
      <title>关于Week1 </title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek1/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek1/</guid>
      <description>目标 了解什么是Kognitwin (KTW)&#xA;本地电脑跑起来KTW&#xA;说明 里面提到的Asset Model, Task framework 等，目前大致了解就行，看完PTT和视频，能理解多少就记住多少，后期会有更深的了解。 关于 Video :Digital Twn intro and Architechture 上面提到的Twin.Shell, Twin.Chevron 是客户Shell, Chevron的部署，我们再腾讯云上也有一个PoC部署, 源码在这。&#xA;上面列举的部署环境是KDI的，KDIC 会拿到最后的KTW 源代码的image&#xA;安装npm遇到的问题 如果在 Twin&amp;gt; npm i 遇到如下报错，如log所示 缺少一个c++ 编译器把lib源码编译下 两种方法。第一种：re-run node.js setup and check this box。 （亲测有效）&#xA;第二种: https://github.com/nodejs/node-gyp 手动安装也可以，但是可能会稍微麻烦一些&#xA;目标 - 本地电脑跑起来KTW 具体实现步骤 Tool and compilers​&#xA;Git&#xA;Node.js (LTS version 16) - 注意：需要安装c++ 编译器，参考安装npm遇到的问题&#xA;Docker&#xA;Visual Studio Code&#xA;Visual Studio Code Extensions​&#xA;Angular CLI or npm install -g @angular/cli​</description>
    </item>
    <item>
      <title>KTW deploys Lingque Cloud</title>
      <link>http://localhost:1313/docs/product/kognitwin/ktw-deploys-lingque-cloud/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/ktw-deploys-lingque-cloud/</guid>
      <description>objective - depoly in alauda standalong feature list v3d(huldra import) search feature edw import pnid import edw links to pnid(Show in split view, open in new tab) influxdb basic version create environment run ktw add environmentcmd. eg: ktw add environment poc-alauda-standalong https://poc.kognitwin.cn/api --idp=keycloak --tenantId dev-poc --clientId twin-devicelogin --authServerUrl https://login.poc.kognitwin.cn/ import root &amp;amp; admin &amp;amp; global &amp;amp; search feature &amp;amp; context menu run ktw importcmd. eg: ktw import -s root admin global -e poc-alauda-standalong ktw import global\templates\cn-search.</description>
    </item>
    <item>
      <title>关于Week2</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek2/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek2/</guid>
      <description>1 Follow **ONLY **Step 4 and 5 in https://internal.docs.kognitwin.com/docs/development/getting_started/step-by-step_guides/hello.local-kubernetes/ and follow below advices when facing errors: 安装ktw cli遇到的问题: 如果在全局安装 ktw cli (npm i -g @kognitwin/cli)的时候没有权限(即使已经在本地的.npmrc文件配置了权限）.如下图所示 可以尝试local build，参考文档：https://kdic.coding.net/p/kdi-twin/d/Twin/git/tree/development/cli&#xA;Twin&amp;gt; npm run cli&#xA;成功后 Twin&amp;gt; ktw --version 可以看到&#xA;2. Import sample 3d data(Huldra) [关于onboarding plan 里面的] https://internal.docs.kognitwin.com/docs/development/getting_started/setting_up_the_twin/huldra-import/&#xA;参考这个教程 在跑 Twin.KDI&amp;gt; npm i 如果遇到npm ERR! code E401类似的错误: 可以尝试: First, delete the .npmrc file in your Users folder. This folder: C:\Users[your user name]&#xA;然后复制黏贴Twin/.npmrc到Twin.KDI/.npmrc (替换到已有的，replace)</description>
    </item>
    <item>
      <title>README</title>
      <link>http://localhost:1313/docs/product/kognitwin/readme/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/readme/</guid>
      <description>这是一个给研发做知识管理的平台，请大家积极分享自己的经验，用的好的软件，值得读的书，建议要听的讲座等。&#xA;积极主动地参与到咱这个平台的贡献中！</description>
    </item>
    <item>
      <title>配置timeseries </title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E9%85%8D%E7%BD%AEtimeseries/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E9%85%8D%E7%BD%AEtimeseries/</guid>
      <description>Install Influx use v1.8, not v2, so far KT tutorial does not support it. docker pull influxdb:1.8 docker run --name influx --restart=always -p 8086:8086 influxdb:1.8 Run task service /c/repos/Twin: npm run serve -w taskservice 3 Use task pushDummyRealtimeValues to generate dummy data (generate data for 2 sensors )&#xA;eg:&#xA;import { ImportContext } from &amp;#39;@kognitwin/cli&amp;#39;; export async function importSource(context: ImportContext) { await context.importJson([&amp;#39;test-rt.json&amp;#39;]); await context.importSource(&amp;#39;rt&amp;#39;, async (context: ImportContext) =&amp;gt; { await context.</description>
    </item>
    <item>
      <title>TerraForm</title>
      <link>http://localhost:1313/docs/product/kognitwin/terraform/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/terraform/</guid>
      <description>How to manage cloud infrastructure with TerraForm What is Terraform ? Terraform is an infrastructure as code (IaC) tool that allows you to build, change, and version infrastructure safely and efficiently. This includes both low-level components like compute instances, storage, and networking, as well as high-level components like DNS entries and SaaS features.&#xA;Background of Terraform in the PoC In this PoC we did not use Terraform to manage the IaC, but after we deployed the Kognitwin we plan to import the resource of Tencent cloud and try to provide the refer to other cloud platform.</description>
    </item>
    <item>
      <title>how to setup timeseries </title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-setup-timeseries/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-setup-timeseries/</guid>
      <description>Install Influx use v1.8, not v2, so far KT tutorial does not support it. docker pull influxdb:1.8 docker run --name influx --restart=always -p 8086:8086 influxdb:1.8 Run task service /c/repos/Twin: npm run serve -w taskservice Use task pushDummyRealtimeValues to generate dummy data (generate data for 2 sensors ) eg:&#xA;import { ImportContext } from &amp;#39;@kognitwin/cli&amp;#39;; export async function importSource(context: ImportContext) { await context.importJson([&amp;#39;test-rt.json&amp;#39;]); await context.importSource(&amp;#39;rt&amp;#39;, async (context: ImportContext) =&amp;gt; { await context.</description>
    </item>
    <item>
      <title>how-to-set-camera-focus-prop-in-v3d</title>
      <link>http://localhost:1313/docs/product/kognitwin/how-to-set-camera-focus-prop-in-v3d/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/how-to-set-camera-focus-prop-in-v3d/</guid>
      <description>Here shows how to set the camera viewing distance and angles for v3d: one example config is like below: the distance is in meters. the angles is Euler, angles[0] is for horizontal, angles[1] is for vertical. default viewing angle is from top down. conversion between degree to Euler is: `EULER = DEGREE / 180 * PI ref set the angles: [0, 1.57] to view from equator </description>
    </item>
    <item>
      <title>ktw transfer from dev.poc to dev</title>
      <link>http://localhost:1313/docs/product/kognitwin/ktw-transfer-from-dev.poc-to-dev/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/ktw-transfer-from-dev.poc-to-dev/</guid>
      <description>从 dev.poc 迁移所有内容到 dev&#xA;assets (v3d, edw, pnid) run `ktw transfer`cmd. eg: ```sh&#xD;ktw transfer transfer\transfer-todev-assets.json&#xD;```&#xD;ref: [transfer-todev-assets.json](https://kdic.coding.net/p/generaltemplate/d/Twin.hello/git/tree/onboarding-zilong/transfer/transfer-todev-assets.json)&#xD;files Note: 首先尝试了通过 `ktw transfer` 把 dev.poc 环境中的 `files` 文件下载到本地, eg: ```json&#xD;{&#xD;&amp;quot;source&amp;quot;: &amp;quot;t&amp;quot;,&#xD;&amp;quot;destination&amp;quot;: &amp;quot;local&amp;quot;,&#xD;&amp;quot;defaults&amp;quot;: {&#xD;&amp;quot;sample&amp;quot;: true,&#xD;&amp;quot;batchSize&amp;quot;: 10000&#xD;},&#xD;&amp;quot;data&amp;quot;: {&#xD;&amp;quot;files&amp;quot;: [&#xD;{&#xD;&amp;quot;id&amp;quot;: &amp;quot;assets&amp;quot;,&#xD;&amp;quot;path&amp;quot;: &amp;quot;files/assets/ORM&amp;quot;,&#xD;&amp;quot;overwrite&amp;quot;: true&#xD;}&#xD;]&#xD;}&#xD;}&#xD;```&#xD;ref: [transfer-tolocal-files.json](https://kdic.coding.net/p/generaltemplate/d/Twin.hello/git/tree/onboarding-zilong/transfer/transfer-tolocal-files.json)&#xD;在 `environments` 环境变量中， 配置 `filesStorage.root` &amp;amp; `filesStorage.SASKey`, eg: ```json&#xD;{&#xD;&amp;quot;id&amp;quot;: &amp;quot;local&amp;quot;,&#xD;&amp;quot;baseUrl&amp;quot;: &amp;quot;http://localhost:8080&amp;quot;,&#xD;&amp;quot;filesStorage&amp;quot;: {&#xD;&amp;quot;root&amp;quot;: &amp;quot;.</description>
    </item>
    <item>
      <title>realtime calculator</title>
      <link>http://localhost:1313/docs/product/kognitwin/realtime-calculator/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/realtime-calculator/</guid>
      <description>teams:rta:hul:realtime:calculator 本地功能实现 copy Twin.KDI\teams\rta folder into Twin.HELLO\teams&#xA;ref: rta folder&#xA;pnid import with linktype&#xA;add rta scopes in ktw.json, eg:&#xA;{ &amp;#34;id&amp;#34;: &amp;#34;rta&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;rta&amp;#34;, &amp;#34;sources&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;meta&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;meta&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;hul&amp;#34; } ], &amp;#34;workflows&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;base&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;teams:rta:base&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;variant&amp;#34;: &amp;#34;default&amp;#34; }, { &amp;#34;type&amp;#34;: &amp;#34;main&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;teams:rta:main&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;variant&amp;#34;: &amp;#34;default&amp;#34; } ], &amp;#34;scopes&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;hul&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;hul&amp;#34;, &amp;#34;sources&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;meta&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;meta&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul:edw&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;edw&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul:v3d&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;v3d&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul:pnid&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;pnid&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul:rt&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;rt&amp;#34; }, { &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul:calculation&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;calculation&amp;#34; } ], &amp;#34;workflows&amp;#34;: [ { &amp;#34;type&amp;#34;: &amp;#34;base&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;teams:rta:hul:base&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.</description>
    </item>
    <item>
      <title>run lng-python-logic 遇到的一些问题记录</title>
      <link>http://localhost:1313/docs/product/kognitwin/run-lng-python-logic-%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/run-lng-python-logic-%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>run lng-python-logic 遇到的一些问题记录&#xA;run poetry install&#xA;问题1: python version 不对 当前激活版本： 3.8.0， 实际需要版本： ^3.11&#xA;问题2： 使用 pyenv 切换 python 版本&#xA;查看已经安装的 python 版本 run pyenv versions&#xA;切换python版本 run&#xD;`pyenv global 3.11.0a1`&#xD;问题3: 切换到 python 3.11 后仍然报错。因为 poetry 仍然使用本地缓存的虚拟环境运行 cache virtualenvs&#xD;找到缓存目录删除后即可&#xD;安装成功：&#xD;run poetry run main&#xA;启动成功：</description>
    </item>
    <item>
      <title>switch to realtime view</title>
      <link>http://localhost:1313/docs/product/kognitwin/switch-to-realtime-view/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/switch-to-realtime-view/</guid>
      <description>switch to realtime view git clone node-opcua repo to your folder eg:&#xA;C:\projects&amp;gt; git clone git@github.com:node-opcua/node-opcua.git ref: github node-opcua url&#xA;start opcua server eg:&#xA;C:\projects\node-opcua&amp;gt;node documentation\sample_server.js ref: sample_server.js&#xA;opcua config to connect node-opcua server and twin server&#xA;{ &amp;#34;sources&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;cn:zilong:rt&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;cn:zilong:rt&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;opcUa&amp;#34;, &amp;#34;options&amp;#34;: { &amp;#34;broadcast&amp;#34;: true, &amp;#34;history&amp;#34;: true, &amp;#34;version&amp;#34;: true, &amp;#34;supportsTimeseriesSubscriptions&amp;#34;: true }, &amp;#34;pathTransform&amp;#34;: &amp;#34;$asset.derived.pathTransform&amp;#34;, &amp;#34;transform&amp;#34;: { &amp;#34;source&amp;#34;: &amp;#34;cn:zilong:rt&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;$asset.id&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;$event.value.value&amp;#34;, &amp;#34;unit&amp;#34;: &amp;#34;$asset.derived.unit&amp;#34; }, &amp;#34;server&amp;#34;: { &amp;#34;opcUa&amp;#34;: { &amp;#34;endpoint&amp;#34;: &amp;#34;/UA/MyLittleServer&amp;#34;, &amp;#34;applicationName&amp;#34;: &amp;#34;NodeOPCUA-Client&amp;#34;, &amp;#34;host&amp;#34;: &amp;#34;opc.</description>
    </item>
  </channel>
</rss>
