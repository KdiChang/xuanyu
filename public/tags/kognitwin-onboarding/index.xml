<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kognitwin-Onboarding on Goldydocs</title>
    <link>http://localhost:1313/tags/kognitwin-onboarding/</link>
    <description>Recent content in Kognitwin-Onboarding on Goldydocs</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/kognitwin-onboarding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>EDW Import from scratch</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-import-from-scratch/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-import-from-scratch/</guid>
      <description>目标 - EDW Import and search config from scratch 下载数据 EDW&#xA;Put the files into local folder C:\Cogs\KDI\cn\zilong\edw&#xA;ktw add source&#xA;ktw add source cn:zilong:edw 修改import-zilong-edw.ts， importPipeline添加任务 - importEdw&#xA;参考import-zilong-edw.ts&#xA;search index 配置 &amp;quot;cn:zilong:edw:tag&amp;quot; and &amp;quot;cn:zilong:edw:doc&amp;quot; in hello-projects.json&#xA;参考hello-projects.json&#xA;import EDW to mongdb&#xA;ktw import -s cn:zilong -t edw mongdb查看结果 db = db.getSiblingDB(&amp;#34;twin&amp;#34;); db.getCollection(&amp;#34;assets&amp;#34;).find({source: &amp;#39;cn:zilong:edw&amp;#39;}); import configuration file for search features \Twin.hello&amp;gt;ktw import hello-projects.json 访问localhost </description>
    </item>
    <item>
      <title>How to set up Postman to connect tencent dev poc environment</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/how-to-set-up-postman-to-connect-tencent-dev-poc-environment/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/how-to-set-up-postman-to-connect-tencent-dev-poc-environment/</guid>
      <description>objective - How to set up Postman to connect tencent dev poc environment Download it from postman&#xA;Collection with authentication configuration Download the default authorized collection json-file: TwinAuthorized.postman_collection.json&#xA;In the Postman toolbar, click the Import button&#xA;set variables&#xA;baseAuthUrl: https://auth.ops.kognitwin.cn tenantId: dev-poc clientId: twin-frontend realm: dev-poc baseUrl: https://dev.poc.kognitwin.cn/api config authorization - configure new token Grant Type: Authorization Code Callback URL: https://dev.poc.kognitwin.cn/ Auth URL: {{baseAuthUrl}}/realms/{{realm}}/protocol/openid-connect/auth Access Token URL: {{baseAuthUrl}}/realms/dev-poc/protocol/openid-connect/token Scope: openid click the &amp;lsquo;Get New Access Token&amp;rsquo; button, Enter your email and credentials (if required) and continue the login formalities Press the &amp;lsquo;Use Token&amp;rsquo; button get assets get timeseries post timeseries reference internal doc postman</description>
    </item>
    <item>
      <title>Huldra Import (Import a 3D Model) from scratch</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/huldra-import-import-a-3d-model-from-scratch/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/huldra-import-import-a-3d-model-from-scratch/</guid>
      <description>目标 - Huldra Import (Import a 3D Model) from scratch Install Kognitwin CLI - ktw Local build&#xA;you can automatically build and install the CLI using the cli script in the Twin repository:&#xA;Twin&amp;gt; npm run cli Create new workspace using Kognitwin CLI 2.1 Create a new workspace hello using template hello in local folder /tutorial. You can use whatever you want as the local folder.&#xA;mkdir /tutorial cd /tutorial ktw new workspace hello --template hello 2.</description>
    </item>
    <item>
      <title>README</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/readme/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/readme/</guid>
      <description>How to 根据 KDIC的 KDIC Onboarding Plan.xlsx 的内容走，对于每一个week plan(就是每一个tab)，有一些补充信息，请参考， 如 关于Week1 信息 KTW 文档： https://internal.docs.kognitwin.com/&#xA;KDI使用Slack答疑：https://internal.docs.kognitwin.com/academy/introduction/slack_onboarding/&#xA;软件环境： 完整的Kognitwin产品，主要用来内外部测试演示，由KDI负责维护： https://dev.kdi.kognitwin.com/&#xA;完整的Kognitwin产品，主要是KDIC用来内外部测试演示，由KDIC负责维护：https://dev.poc.kognitwin.cn/&#xA;缩略词： KDIC: Kongsberg Digital China&#xA;KTW: Kognitwin&#xA;ref: Onboarding plan from KDI (Kongsberg Digital)</description>
    </item>
    <item>
      <title>edw links to pnid</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-links-to-pnid/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/edw-links-to-pnid/</guid>
      <description>objective - edw links to pnid create cn-context-menu.json ref: cn-context-menu.json&#xA;create template contextMenu in hello-projects.json ref: hello-projects.json&#xA;some changes in zilong-workflows-main.json 3.1 change template context menu id - &amp;quot;id&amp;quot;: &amp;quot;cn:contextMenu&amp;quot;&#xA;3.2 add &amp;quot;slotsControlMode&amp;quot;: &amp;quot;implicit&amp;quot; in layout of content&#xA;3.3 add document template in components&#xA;{ &amp;#34;id&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;template&amp;#34;: { &amp;#34;id&amp;#34;: &amp;#34;no:documentviewer&amp;#34;, &amp;#34;parameters&amp;#34;: { &amp;#34;defaultId&amp;#34;: &amp;#34;-&amp;#34;, &amp;#34;componentId&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;actionScope&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;navigationScope&amp;#34;: &amp;#34;document&amp;#34;, &amp;#34;messageSource&amp;#34;: &amp;#34;process-view&amp;#34;, &amp;#34;currentScope&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;oppositeScope&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;defaultNavMessagesOff&amp;#34;: false, &amp;#34;allowedToDrawAndEdit&amp;#34;: true } } } ref: zilong-workflows-main.</description>
    </item>
    <item>
      <title>importPnID</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/importpnid/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/importpnid/</guid>
      <description>DiagramParser Use the TestViewer in internal viewer to read PnID(we do not have access to Azure Devops) Get familiar with TestViewer How to use task importDocuments to import pnid Need to get ImageMagic dependency. The Configuration in https://internal.docs.kognitwin.com/docs/development/tasks/import/pnid/ could be auto generated by: ktw add scope cn:hello ktw add source cn:hello:pnid One needs to understand the finder.json which is a must-to-have file to config what to ipmort to mongoDB. finderdef_examples 目标1：pdf导入mongodb 下载pdf文件。 Keep only 1301-PWells_1-4.</description>
    </item>
    <item>
      <title>influxdb emission management depoly tencent poc</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management-depoly-tencent-poc/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management-depoly-tencent-poc/</guid>
      <description>objective - deploy emissions management in tencent poc add environment tencent poc run ktw add environmentcmd. eg:&#xA;ktw add environment t https://dev.poc.kognitwin.cn/api --idp=keycloak --tenantId dev-poc --clientId twin-devicelogin --authServerUrl https://auth.ops.kognitwin.cn/ import workflow run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-workflows-emission-management.json -e t ref: hello-workflows-emission-management.json&#xA;import template run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-templates-nz-emission-management.json -e t ref: hello-templates-nz-emission-management.json&#xA;change server influx host to influxdb.default, then import sources run ktw importcmd. eg:&#xA;ktw import cn\zilong\zilong-rt.</description>
    </item>
    <item>
      <title>influxdb emission management</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/influxdb-emission-management/</guid>
      <description>objective - run emissions management import workflow run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-workflows-emission-management.json then change source to &amp;quot;source&amp;quot;: &amp;quot;cn:zilong:rt&amp;quot;&#xA;ref: hello-workflows-emission-management.json&#xA;import template run ktw importcmd. eg:&#xA;ktw import cn\zilong\hello-templates-nz-emission-management.json ref: hello-templates-nz-emission-management.json&#xA;Register the sensors run ktw importcmd. eg:&#xA;ktw import cn\zilong\test-rta-assets.json ref: test-rta-assets.json&#xA;Use task pushDummyRealtimeValues to generate dummy data run ktw importcmd. eg:&#xA;ktw import -s cn:zilong -t rt -e local ref: import-zilong-rt.ts&#xA;result images notes: 6.1 最基础的版本，点击右侧指标，左侧chart展示的逻辑 通过 redis 的 pub sub， &amp;quot;message&amp;quot;: &amp;quot;SetWorkflowParameter&amp;quot;, 通过trigger loadScene方法实现的</description>
    </item>
    <item>
      <title>pnid import from scratch</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/pnid-import-from-scratch/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/pnid-import-from-scratch/</guid>
      <description>目标1 pdf导入mongodb 下载pdf文件。Keep only 1301-PWells_1-4.pdf and 1301-PWells_5-8.pdf under C:\Cogs\KDI\cn\zilong\pnid. (1301-PWells_1-4.pdf)[https://dbinsp.sharepoint.com/:b:/r/sites/KDIASKDIChina-SolutionandDev/Shared%20Documents/Solution%20and%20Dev/11_Dev/KTW%20onboarding/importPnid/1301-PWells_1-4.pdf?csf=1&amp;amp;web=1&amp;amp;e=4lCkBX] (1301-PWells_5-8.pdf)[https://dbinsp.sharepoint.com/:b:/r/sites/KDIASKDIChina-SolutionandDev/Shared%20Documents/Solution%20and%20Dev/11_Dev/KTW%20onboarding/importPnid/1301-PWells_5-8.pdf?csf=1&amp;amp;web=1&amp;amp;e=HzDfha] 运行ktw add source 命令 ktw add source cn:zilong:pnid 创建正则表达式标注pdf文件 keep demoFinder.json under C:\Cogs\KDI\cn\zilong\configs demoFinder.json&#xA;修改import-demo-pnid.ts， 参数inputDir, outputDir, finderFileDir, analyzerConfig 参考import-demo-pnid.ts&#xA;在.env配置BINARY_SEARCH_PATHS（本地环境依赖） 参考.env&#xA;pdf文件导入mongdb, 运行ktw import 命令&#xA;ktw import -s cn:zilong -t pnid -e local 效果图 目标2 - pdf在页面显示 创建workflows and templates&#xA;1.1 参考 demo-pnid-workflows-test.json&#xA;1.2 参考 demo-pnid-no-documentviewer.json&#xA;执行导入&#xA;ktw import cn\zilong\demo-pnid-workflows-test.json -e local ktw import cn\zilong\demo-pnid-no-documentviewer.json -e local 查看网页</description>
    </item>
    <item>
      <title>关于Week1 </title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek1/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek1/</guid>
      <description>目标 了解什么是Kognitwin (KTW)&#xA;本地电脑跑起来KTW&#xA;说明 里面提到的Asset Model, Task framework 等，目前大致了解就行，看完PTT和视频，能理解多少就记住多少，后期会有更深的了解。 关于 Video :Digital Twn intro and Architechture 上面提到的Twin.Shell, Twin.Chevron 是客户Shell, Chevron的部署，我们再腾讯云上也有一个PoC部署, 源码在这。&#xA;上面列举的部署环境是KDI的，KDIC 会拿到最后的KTW 源代码的image&#xA;安装npm遇到的问题 如果在 Twin&amp;gt; npm i 遇到如下报错，如log所示 缺少一个c++ 编译器把lib源码编译下 两种方法。第一种：re-run node.js setup and check this box。 （亲测有效）&#xA;第二种: https://github.com/nodejs/node-gyp 手动安装也可以，但是可能会稍微麻烦一些&#xA;目标 - 本地电脑跑起来KTW 具体实现步骤 Tool and compilers​&#xA;Git&#xA;Node.js (LTS version 16) - 注意：需要安装c++ 编译器，参考安装npm遇到的问题&#xA;Docker&#xA;Visual Studio Code&#xA;Visual Studio Code Extensions​&#xA;Angular CLI or npm install -g @angular/cli​</description>
    </item>
    <item>
      <title>关于Week2</title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek2/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E5%85%B3%E4%BA%8Eweek2/</guid>
      <description>1 Follow **ONLY **Step 4 and 5 in https://internal.docs.kognitwin.com/docs/development/getting_started/step-by-step_guides/hello.local-kubernetes/ and follow below advices when facing errors: 安装ktw cli遇到的问题: 如果在全局安装 ktw cli (npm i -g @kognitwin/cli)的时候没有权限(即使已经在本地的.npmrc文件配置了权限）.如下图所示 可以尝试local build，参考文档：https://kdic.coding.net/p/kdi-twin/d/Twin/git/tree/development/cli&#xA;Twin&amp;gt; npm run cli&#xA;成功后 Twin&amp;gt; ktw --version 可以看到&#xA;2. Import sample 3d data(Huldra) [关于onboarding plan 里面的] https://internal.docs.kognitwin.com/docs/development/getting_started/setting_up_the_twin/huldra-import/&#xA;参考这个教程 在跑 Twin.KDI&amp;gt; npm i 如果遇到npm ERR! code E401类似的错误: 可以尝试: First, delete the .npmrc file in your Users folder. This folder: C:\Users[your user name]&#xA;然后复制黏贴Twin/.npmrc到Twin.KDI/.npmrc (替换到已有的，replace)</description>
    </item>
    <item>
      <title>配置timeseries </title>
      <link>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E9%85%8D%E7%BD%AEtimeseries/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/product/kognitwin/kognitwin-onboarding/%E9%85%8D%E7%BD%AEtimeseries/</guid>
      <description>Install Influx use v1.8, not v2, so far KT tutorial does not support it. docker pull influxdb:1.8 docker run --name influx --restart=always -p 8086:8086 influxdb:1.8 Run task service /c/repos/Twin: npm run serve -w taskservice 3 Use task pushDummyRealtimeValues to generate dummy data (generate data for 2 sensors )&#xA;eg:&#xA;import { ImportContext } from &amp;#39;@kognitwin/cli&amp;#39;; export async function importSource(context: ImportContext) { await context.importJson([&amp;#39;test-rt.json&amp;#39;]); await context.importSource(&amp;#39;rt&amp;#39;, async (context: ImportContext) =&amp;gt; { await context.</description>
    </item>
  </channel>
</rss>
