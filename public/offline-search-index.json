[{"body":"After installing Navidrome in your platform, you need to create your first user. This will be your admin user, a super user that can manage all aspects of Navidrome, including the ability to manage other users. Just browse to Navidrome’s homepage at http://localhost:4533 and you will be greeted with a screen like this:\nJust fill out the username and password you want to use, confirm the password and click on the “Create Admin” button.\nThat’s it! You should now be able to browse and listen to all your music.\nNote: It usually take a couple of minutes for your music to start appearing in Navidrome’s UI. You can check the logs to see what is the scan progress. If you see any errors, reach out and we can help you\nNote: If you have any .m3u playlist in your music folder, they should be added as playlist in Navidrome automatically. However, Navidrome only does that when there is an admin user. On a fresh installation, it can happen that Navidrome already finished scanning your music folder before you created the first admin user. In that case, you need to make sure the “last modified” date of the m3u files is newer than the last scan. On Linux and macOS systems, this can be done with the touch command.\n","categories":"","description":"Already installed? Play us a song, Navidrome!\n","excerpt":"Already installed? Play us a song, Navidrome!\n","ref":"/xuanyu/docs/getting-started/","tags":"","title":"Getting Started"},{"body":"","categories":"","description":"","excerpt":"","ref":"/xuanyu/docs/usage/","tags":"","title":"Usage"},{"body":"Navidrome allows some customization using environment variables, loading from a configuration file or using command line arguments.\nConfiguration File Navidrome tries to load the configuration from a navidrome.toml file in the current working directory, if it exists. You can create this file and put any of the configuration options below in it. Example of a configuration file (select your OS):\nExample: Windows macOS Unix-based systems # This is just an example! Please see available options to customize Navidrome for your needs at # https://www.navidrome.org/docs/usage/configuration-options/#available-options LogLevel = 'DEBUG' ScanSchedule = '@every 24h' TranscodingCacheSize = '150MiB' # IMPORTANT: Use single quotes for paths in Windows MusicFolder = 'C:\\Users\\JohnDoe\\Music' # Set this to the path of your ffmpeg executable FFmpegPath = 'C:\\Program Files\\ffmpeg\\bin\\ffmpeg.exe' # This is just an example! Please see available options to customize Navidrome for your needs at\r# https://www.navidrome.org/docs/usage/configuration-options/#available-options\rLogLevel = 'DEBUG'\rScanSchedule = '@every 24h'\rTranscodingCacheSize = '150MiB'\rMusicFolder = '/Users/JohnDoe/Music'\r# This is the default path for Homebrew installed ffmpeg\rFFmpegPath = '/usr/local/bin/ffmpeg' # This is just an example! Please see available options to customize Navidrome for your needs at\r# https://www.navidrome.org/docs/usage/configuration-options/#available-options\rLogLevel = 'DEBUG'\rScanSchedule = '@every 24h'\rTranscodingCacheSize = '150MiB'\rMusicFolder = '/mnt/music' You can also specify a different path for the configuration file, using the -c/--configfile option. Navidrome can load the configuration from toml, json, yml and ini files.\nThe example below assume you have created a navidrome.toml file in your home directory:\nExample: Windows macOs Unix-based systems C:\\\u003e navidrome --configfile \"c:\\User\\JohnDoe\\navidrome.toml\" $ navidrome --configfile \"/User/JohnDoe/navidrome.toml\" $ navidrome --configfile \"/home/johndoe/navidrome.toml\" Command Line Arguments You can set most of the config options below passing arguments to navidrome executable.\nThe example below shows how to set the MusicFolder using the command line, assuming you have your music library under your home directory:\nExample: Windows macOs Unix-based systems C:\\\u003e navidrome --musicfolder \"c:\\User\\JohnDoe\\Music\" $ navidrome --musicfolder \"/User/JohnDoe/Music\" $ navidrome --musicfolder \"/mnt/music\" Please note that command line arguments must be all lowercase. For a list of all available command line options, just call navidrome --help.\nEnvironment Variables Any configuration option can be set as an environment variable, just add a the prefix ND_ and make it all uppercase. Ex: ND_LOGLEVEL=debug. See below for all available options\nAvailable Options Basic configuration In config file As an env var Description Default Value ND_CONFIGFILE Load configurations from an external config file \"./navidrome.toml\" MusicFolder ND_MUSICFOLDER Folder where your music library is stored. Can be read-only \"./music\" DataFolder ND_DATAFOLDER Folder to store application data (DB) \"./data\" CacheFolder ND_CACHEFOLDER Folder to store cache data (transcoding, images…) \"\u003cDataFolder\u003e/cache\" LogLevel ND_LOGLEVEL Log level. Useful for troubleshooting. Possible values: error, warn, info, debug, trace \"info\" Address ND_ADDRESS Address the server will bind to. Can be an IPv4 or IPv6. Also supports unix:/path/to/file for Unix socket files 0.0.0.0 and :: (all IPs) BaseUrl ND_BASEURL Base URL to configure Navidrome behind a proxy (examples: /music, https://music.example.com) Empty Port ND_PORT HTTP port Navidrome will use 4533 Advanced configuration In config file As an environment variable Description Default Value AlbumPlayCountMode ND_ALBUMPLAYCOUNTMODE Change how album play count is computed. When set to \"normalized\", album play count will be divided by the number of album tracks \"absolute\" AuthRequestLimit* ND_AUTHREQUESTLIMIT How many login requests can be processed from a single IP during the AuthWindowLength. Set to 0 to disable the limit rater 5 AuthWindowLength* ND_AUTHWINDOWLENGTH Window Length for the authentication rate limit \"20s\" AutoImportPlaylists ND_AUTOIMPORTPLAYLISTS Enable/disable .m3u playlist auto-import true DefaultPlaylistPublicVisibility ND_DEFAULTPLAYLISTPUBLICVISIBILITY Set imported playlists as public by default false ArtistArtPriority* ND_ARTISTARTPRIORITY Configure the order to look for artist images. artist.*, album/artist.*, external CoverArtPriority* ND_COVERARTPRIORITY Configure the order to look for cover art images. Use special embedded value to get embedded images from the audio files cover.*, folder.*, front.*, embedded, external CoverJpegQuality ND_COVERJPEGQUALITY Set JPEG quality percentage for resized cover art images 75 DefaultDownsamplingFormat ND_DEFAULTDOWNSAMPLINGFORMAT Format to transcode to when client requests downsampling (specify maxBitrate without a format) opus DefaultLanguage ND_DEFAULTLANGUAGE Sets the default language used by the UI when logging in from a new browser. This value must match one of the file names in the resources/i18n. Ex: for Chinese Simplified it has to be zh-Hans (case sensitive) \"en\" DefaultTheme ND_DEFAULTTHEME Sets the default theme used by the UI when logging in from a new browser. This value must match one of the options in the UI Dark EnableArtworkPrecache ND_ENABLEARTWORKPRECACHE Enable image pre-caching of new added music true EnableCoverAnimation ND_ENABLECOVERANIMATION Controls whether the player in the UI will animate the album cover (rotation) true EnableDownloads ND_ENABLEDOWNLOADS Enable the option in the UI to download music/albums/artists/playlists from the server true EnableExternalServices ND_ENABLEEXTERNALSERVICES. Set this to false to completely disable ALL external integrations true EnableFavourites ND_ENABLEFAVOURITES Enable toggling “Heart”/“Loved” for songs/albums/artists in the UI (maps to “Star”/“Starred” in Subsonic Clients) true EnableGravatar ND_ENABLEGRAVATAR Use Gravatar images as the user profile image. Needs the user’s email to be filled false EnableLogRedacting ND_ENABLELOGREDACTING Whether or not sensitive information (like tokens and passwords) should be redacted (hidden) in the logs true EnableMediaFileCoverArt* ND_ENABLEMEDIAFILECOVERART If set to false, it will return the album CoverArt when a song CoverArt is requested true EnableReplayGain ND_ENABLEREPLAYGAIN Enable ReplayGain options in the UI true EnableSharing ND_ENABLESHARING Enable the Sharing feature false EnableStarRating ND_ENABLESTARRATING Enable 5-star ratings in the UI true EnableTranscodingConfig* ND_ENABLETRANSCODINGCONFIG Enables transcoding configuration in the UI false EnableUserEditing ND_ENABLEUSEREDITING Enable regular users to edit their details and change their password true FFmpegPath ND_FFMPEGPATH Path to ffmpeg executable. Use it when Navidrome cannot find it, or you want to use a specific version Empty (search in the PATH) GATrackingID ND_GATRACKINGID Send basic info to your own Google Analytics account. Must be in the format UA-XXXXXXXX Empty (disabled) HTTPSecurityHeaders.CustomFrameOptionsValue ND_HTTPSECURITYHEADERS_CUSTOMFRAMEOPTIONSVALUE Allows the X-Frame-Options header value to be set with a custom value. Ex: \"SAMEORIGIN\" \"DENY\" IgnoredArticles ND_IGNOREDARTICLES List of ignored articles when sorting/indexing artists \"The El La Los Las Le Les Os As O A\" ImageCacheSize ND_IMAGECACHESIZE Size of image (art work) cache. Set to \"0\" to disable cache \"100MB\" Jukebox.Enabled ND_JUKEBOX_ENABLED Enable Jukebox mode (play audio on server’s hardware) Click here for details false Jukebox.AdminOnly ND_JUKEBOX_ADMINONLY By default, Jukebox mode is only available to Admins. Set this option to false to allow any valid user to control it true Jukebox.Devices (cannot be set as an environment variable) List of devices that can be used by the Jukebox. Click here for details Empty (auto detect) Jukebox.Default ND_JUKEBOX_DEFAULT Device to use for Jukebox mode, if there are multiple Jukebox.Devices entries. Click here for details Empty (auto detect) LastFM.Enabled ND_LASTFM_ENABLED Set this to false to completely disable Last.fm integration true LastFM.ApiKey* ND_LASTFM_APIKEY Last.fm API Key Empty LastFM.Secret* ND_LASTFM_SECRET Last.fm API Secret Empty LastFM.Language ND_LASTFM_LANGUAGE Two letter-code for language to be used to retrieve biographies from Last.fm \"en\" ListenBrainz.BaseURL ND_LISTENBRAINZ_BASEURL Set this to override the default ListenBrainz base URL (useful with self-hosted solutions like Maloja* https://api.listenbrainz.org/1/ ListenBrainz.Enabled ND_LISTENBRAINZ_ENABLED Set this to false to completely disable ListenBrainz integration true MaxSidebarPlaylists ND_MAXSIDEBARPLAYLISTS Set the maximum number of playlists shown in the UI’s sidebar. Note that a very large number can cause UI performance issues. 100 MPVPath ND_MPVPATH Path to mpv executable. Used for Jukebox mode Empty (search in PATH) MPVCmdTemplate ND_MPVCMDTEMPLATE Cmd template used to construct the call of the mpv executable. Used for Jukebox mode mpv --audio-device=%d --no-audio-display --pause %f --input-ipc-server=%s PasswordEncryptionKey* ND_PASSWORDENCRYPTIONKEY Passphrase used to encrypt passwords in the DB. Click here for details - PlaylistsPath ND_PLAYLISTSPATH Where to search for and import playlists from. Can be a list of folders/globs (separated by : (or ; on Windows). Paths MUST be relative to MusicFolder \".:**/**\" (meaning MusicFolder and all its subfolders) PreferSortTags ND_PREFERSORTTAGS Use Sort_* tags to sort columns in the UI. false Prometheus.Enabled ND_PROMETHEUS_ENABLED Enable extra endpoint with Prometheus metrics. false Prometheus.MetricsPath ND_PROMETHEUS_METRICSPATH Custom path for Prometheus metrics. Useful for blocking unauthorized metrics requests. \"/metrics\" RecentlyAddedByModTime ND_RECENTLYADDEDBYMODTIME Uses music files’ modification time when sorting by “Recently Added”. Otherwise use import time false ReverseProxyUserHeader* ND_REVERSEPROXYUSERHEADER HTTP header containing user name from authenticated proxy \"Remote-User\" ReverseProxyWhitelist* ND_REVERSEPROXYWHITELIST Comma separated list of IP CIDRs which are allowed to use reverse proxy authentication, empty means “deny all” Empty Scanner.Extractor* ND_SCANNER_EXTRACTOR Select metadata extractor implementation. Options: taglib or ffmpeg \"taglib\" Scanner.GenreSeparators ND_SCANNER_GENRESEPARATORS List of separators to split genre tags \";/,\" Scanner.GroupAlbumReleases ND_SCANNER_GROUPALBUMRELEASES “true” groups albums with the same Artist + Album Title as one album; “false” splits re-issues (=different Release Date) into separate albums false ScanSchedule ND_SCANSCHEDULE Configure periodic scans using “cron” syntax. To disable it altogether, set it to \"0\" \"@every 1m\" SearchFullString ND_SEARCHFULLSTRING Match query strings anywhere in searchable fields, not only in word boundaries. Useful for languages where words are not space separated false SessionTimeout ND_SESSIONTIMEOUT How long Navidrome will wait before closing web ui idle sessions \"24h\" ShareURL ND_SHAREURL Base URL for shared links. Useful when your server address is not a public (ex: when using Tailscale). See discussion here Empty (use server address) SmartPlaylistRefreshDelay ND_SMARTPLAYLISTREFRESHDELAY How often to refresh Smart Playlists. \"5s\" Spotify.ID* ND_SPOTIFY_ID Spotify Client ID. Required if you want Artist images Empty Spotify.Secret* ND_SPOTIFY_SECRET Spotify Client Secret. Required if you want Artist images Empty SubsonicArtistParticipations ND_SUBSONICARTISTPARTICIPATIONS When requesting artist’s albums, include albums where the artist participates (ex: Various Artists compilations) false TLSCert ND_TLSCERT Path for the TLS certificate file, which should include the signature chain if any Empty (disable TLS) TLSKey ND_TLSKEY Path for the TLS key file Empty (disable TLS) TranscodingCacheSize ND_TRANSCODINGCACHESIZE Size of transcoding cache. Set to \"0\" to disable cache \"100MB\" UILoginBackgroundUrl ND_UILOGINBACKGROUNDURL Change background image used in the Login page random music image from Unsplash.com UIWelcomeMessage ND_UIWELCOMEMESSAGE Add a welcome message to the login screen Empty UnixSocketPerm ND_UNIXSOCKETPERM Set file permissions for Unix Socket File.* \"0660\" Notes Durations are specified as a number and a unit suffix, such as “24h”, “30s” or “1h10m”. Valid time units are “s”, “m”, “h”. Sizes are specified as a number and an optional unit suffix, such as “1GB” or “150 MiB”. Default unit is bytes. Note: “1KB” == “1000”, “1KiB” == “1024” Transcoding can be required in some situations. For example: trying to play a WMA file in a webbrowser, will only work for natively supported formats by the browser you are using. (so playing that with Mozilla Firefox on Linux, will not work. Mozilla even has their own guide about audio codecs). ","categories":"","description":"How to customize Navidrome to your environment\n","excerpt":"How to customize Navidrome to your environment\n","ref":"/xuanyu/docs/usage/configuration-options/","tags":"","title":"Navidrome Configuration Options"},{"body":" This documentation is a work in progress. If you feel like something is missing or wrong, please feel free to submit your fixes/suggestions using the links to the right of the screen (only visible in a desktop browser)\n","categories":"","description":"","excerpt":" This documentation is a work in progress. If you feel like something …","ref":"/xuanyu/docs/","tags":"","title":"Documentation"},{"body":"Artists Fetching images for artists is controlled by the ArtistArtPriority config option. This is a comma-separated list of places to look for artist images. The default is artist.*, album/artist.*, external, meaning:\nFirst try to find an artist.* image in the artist folder(s) If not found, try to find an artist.* image in one of the album folders for this artist If not found, try to fetch it from an external service (currently only Spotify) If not found, use the artist image placeholder (grey star image) Albums CoverArt fetching for albums is controlled by the CoverArtPriority config option. This is a comma-separated list of places to look for album art images. The default is cover.*, folder.*, front.*, embedded, external, meaning:\nFirst try to find a cover.*, folder.* or front.* image in the album folder(s) If not found, try to read an embedded image from one of the mediafiles for that album If not found, try to fetch it from an external service (currently only Last.fm) If not found, use the cover placeholder (blue record image) MediaFiles Some players (including Navidrome’s own WebUI), can display different cover art images for each track in an album. Navidrome tries to read an embedded image from the mediafile. If it does not have one, it will get the album cover art as explained above. MediaFile cover art can be slow in some systems and can be disabled by setting EnableMediaFileCoverArt=false.\nPlaylists Currently, Playlists CoverArt images are generated tiled images, containing up to 4 covers from the albums in the playlist. If for any reason it cannot be generated, it will use the album cover placeholder (blue record image). This is currently only available in the Subsonic API.\n","categories":"","description":"How Navidrome finds artist and cover art images\n","excerpt":"How Navidrome finds artist and cover art images\n","ref":"/xuanyu/docs/usage/artwork/","tags":"","title":"Artwork location resolution"},{"body":"Last.fm Navidrome can use Last.fm to retrieve artists biographies, top songs, similar artists and album covers. It can also send your scrobbles to Last.fm. For these features to work, you’ll need to set the config options LastFM.ApiKey and LastFM.Secret. You can obtain these values by creating a free API account in Last.fm:\nGo to https://www.last.fm/api/account/create and create an API account. Only the Application Name field is mandatory: After submitting the form, you can get the API Key and Shared Secret from the Account Created page: Copy the values above to your configuration file as LastFM.ApiKey and LastFM.Secret (or set them as environment variables ND_LASTFM_APIKEY and ND_LASTFM_SECRET) Spotify Artist images can be retrieved from Spotify. You’ll need to set the config options Spotify.ID and Spotify.Secret. To obtain these values, create a free account in Spotify, then follow these steps:\nClick on the “Create app” button in Spotify’s Developer dashboard: https://developer.spotify.com/dashboard/applications: Fill the name and description fields, fill the “Redirect URI” field with http://localhost/ and click on the “Save” button: Go to “Settings”: Click “View client secret”: Copy the values of ID and secret to your configuration file as Spotify.ID and Spotify.Secret (or set them as environment variables ND_SPOTIFY_ID and ND_SPOTIFY_SECRET): ","categories":"","description":"Configure Navidrome to get information and images from Last.fm and Spotify\n","excerpt":"Configure Navidrome to get information and images from Last.fm and …","ref":"/xuanyu/docs/usage/external-integrations/","tags":"","title":"External Integrations"},{"body":" NOTE Please be aware that the Sharing feature is still under active development, and improvements to functionality and security are expected in future updates. Please report any issues or suggestions to the Navidrome GitHub issues page. Navidrome has a “Sharing” feature which allows users to generate a shareable link for a track, album, artist, or playlist. This link can then be sent to friends, allowing them to listen or download the music without having an account on your Navidrome instance.\nEnabling the Sharing Feature As of version 0.49.3, the Sharing feature is disabled by default. To enable it, you need to adjust your Navidrome configuration. In your configuration file, set EnableSharing=true, or set the environment variable ND_ENABLESHARING=true.\nOnce the Sharing feature is enabled, all users will have access to all existing shares. This includes the ability to change the description and expiration date of the shares, as well as the capability to create new shares.\nPlease note that at this time, there is no way to set specific sharing permissions per user. This means that once the Sharing feature is enabled, all users have equal access and capabilities related to sharing. This includes the ability to view, modify, and create shares.\nDue to this, we advise you to enable this feature only if you are comfortable with these permissions. Future updates may include more granular permission controls for sharing.\nUsing the Sharing Feature Once the Sharing feature is enabled, all users will be able to access current shares, modify descriptions and expiration, and create new ones. However, as of the initial implementation, there is currently no way to set permissions per user.\nWhen browsing your music collection, you will notice a “Share” button or menu item available for each item, be it a track, album, artist, or playlist. To share an item, simply click on this “Share” button.\nUpon clicking the “Share” button, a dialog box will appear, allowing you to configure your share. This includes setting a description other configurations for the share.\nOnce you have configured your share as desired, click the “Share” button. This will generate a unique shareable link, which you can then copy and share with your friends.\nThe generated sharable links will be in the following format: http://yourserver.com/share/XXXXXXXXXX. If you have Navidrome behind a reverse proxy, ensure you allow traffic to /share.\nSubsonic API Endpoints The Sharing feature also implements the related Subsonic API endpoints. See the API docs for implemented endpoints\nMeta-tags to HTML Meta-tags are added to the HTML to provide some information about the shared music on chat platforms. Example of a link shared in Discord:\n","categories":"","description":"How to create links to your media to be shared on Facebook, X, WhatsApp\n","excerpt":"How to create links to your media to be shared on Facebook, X, …","ref":"/xuanyu/docs/usage/sharing/","tags":"","title":"Sharing"},{"body":"Currently, Navidrome supports monitoring and alerting using Prometheus/OpenMetrics standard. Example Grafana dashboard:\nOverview Prometheus is a service that takes data from a metrics endpoint and collects it. Grafana is a dashboard service that can take data from a Prometheus server and display it. Navidrome has an easy way to create a metrics endpoint that Prometheus can use. Once you point Prometheus to this endpoint, and Grafana to your Prometheus server, you will be able to monitor your Navidrome instance.\nThe easiest way to do this is using docker-compose and Docker networks.\nConfiguration You need to set ND_PROMETHEUS_ENABLED to enable Prometheus metrics endpoint. Setting custom ND_PROMETHEUS_METRICSPATH is highly recommended if your Navidrome instance is publicly available.\nMinimal docker compose example file with metrics enabled, and Prometheus and Grafana containers:\nversion: '3' services: navidrome: image: deluan/navidrome user: 1000:1000 # should be owner of volumes ports: - \"4533:4533\" environment: ND_PROMETHEUS_ENABLED: \"true\" ND_PROMETHEUS_METRICSPATH: \"/metrics_SOME_SECRET_KEY\" volumes: - \"./data:/data\" - \"./music:/music\" networks: - metrics-network prometheus: image: prom/prometheus container_name: prometheus command: - '--config.file=/prometheus/prometheus.yml' ports: - 9090:9090 restart: unless-stopped volumes: - ./etc/prometheus:/etc/prometheus - ./prometheus:/prometheus networks: - metrics-network grafana: image: grafana/grafana container_name: grafana ports: - 3000:3000 restart: unless-stopped environment: - GF_SERVER_ROOT_URL=\u003cyour external grafana endpoint here\u003e - GF_SERVER_SERVE_FROM_SUB_PATH=false # if your external grafana endpoint has a subpath or not volumes: - ./etc/grafana:/etc/grafana/provisioning/datasources networks: - metrics-network networks: metrics-network: driver: bridge Example prometheus.yml config to parse this instance:\nglobal: scrape_interval: 10s scrape_configs: - job_name: 'navidrome' metrics_path: /metrics_SOME_SECRET_KEY scheme: http static_configs: - targets: ['navidrome:4533'] Dashboard Grafana dashboard available here: #18038.\nSimple to install but fully fledged Grafana docker compose configuration can be found here.\n","categories":"","description":"How to monitor status of your Navidrome instance\n","excerpt":"How to monitor status of your Navidrome instance\n","ref":"/xuanyu/docs/usage/monitoring/","tags":"","title":"Monitoring Navidrome"},{"body":"Introduction Navidrome’s Jukebox feature is a built-in functionality that allows users to play music directly to the server’s audio hardware. This essentially turns your server into a jukebox, enabling you to play songs or playlists remotely through a supported Subsonic client. With the Jukebox feature, you can control the audio playback in real-time, just like you would with any other media player. It’s a convenient way to enjoy your music collection without the need for additional hardware or software. Ideal for parties, background music, or personal enjoyment, this feature enhances the versatility of your Navidrome server setup.\nNavidrome’s Jukebox mode is based on the OpenSource audio player MPV. MPV is a mature and tested audio/videoplayer that is supported on many platforms. Navidrome’s Jukebox mode uses MPV for audio playback in combination with MPV’s feature to be controlled through IPC.\nMPV Installation MPV must be present on the system where the Navidrome server runs. You might find it already installed or could install it yourself using the methods given on the MPV’s installation page.\nThe minimal requirement is the IPC support. MPV added IPC support with version 0.7.0 for Linux and macOS and added Windows support with version 0.17.0. Your OS will most probably include newer versions (0.3X) which we recommend. After the installation check the version with:\n$ mpv --version Jukebox mode will use the MPV audio device naming scheme for its configuration. To get an overview about the available audio devices on the system do:\n$ mpv --audio-device=help Here is an example on macOS:\nList of detected audio devices: 'auto' (Autoselect device) 'coreaudio/AppleGFXHDAEngineOutputDP:10001:0:{D109-7950-00005445}' (BenQ EW3270U) 'coreaudio/AppleUSBAudioEngine:Cambridge Audio :Cambridge Audio USB Audio 1.0:0000:1' (Cambridge Audio USB 1.0 Audio Out) 'coreaudio/BuiltInSpeakerDevice' (MacBook Pro-Lautsprecher) or on Linux:\nList of detected audio devices: 'auto' (Autoselect device) 'alsa' (Default (alsa)) 'alsa/jack' (JACK Audio Connection Kit) 'alsa/default:CARD=Headphones' (bcm2835 Headphones, bcm2835 Headphones/Default Audio Device) ... 'jack' (Default (jack)) 'sdl' (Default (sdl)) 'sndio' (Default (sndio)) Please use the full device name if you do not want to use MPV’s auto device. For example on macOS:\n\"coreaudio/AppleUSBAudioEngine:Cambridge Audio :Cambridge Audio USB Audio 1.0:0000:1\" Configuration Jukebox mode is enabled by setting this option in your configuration file (normally navidrome.toml):\nJukebox.Enabled = true In most cases, this should be the only config option needed.\nThe MPV binary should be found automatically on the path. In case this does not work use this configuration option:\nMPVPath = \"/path/to/mpv\" Jukebox mode will use MPV’s auto device for playback if no device is given.\nOne can supply an array of multiple devices under Jukebox.Devices (note: this config option cannot be set as an environment variable):\nJukebox.Devices = [ # \"symbolic name \" \"device\" [ \"internal\", \"coreaudio/BuiltInSpeakerDevice\" ], [ \"dac\", \"coreaudio/AppleUSBAudioEngine:Cambridge Audio :Cambridge Audio USB Audio 1.0:0000:1\" ] ] and select one by using Jukebox.Default:\nJukebox.Default = \"dac\" Here is one example configuration:\n# Enable/Disable Jukebox mode Jukebox.Enabled = true # List of registered devices, syntax: # \"symbolic name \" - Symbolic name to be used in UI's # \"device\" - MPV audio device name, do mpv --audio-device=help to get a list Jukebox.Devices = [ # \"symbolic name \" \"device\" [ \"internal\", \"coreaudio/BuiltInSpeakerDevice\" ], [ \"dac\", \"coreaudio/AppleUSBAudioEngine:Cambridge Audio :Cambridge Audio USB Audio 1.0:0000:1\" ] ] # Device to use for Jukebox mode, if there are multiple entries above. # Using device \"auto\" if missing Jukebox.Default = \"dac\" The MPVCmdTemplate / Snapcast integration There might be cases, where you want to control the call of the mpv binary. Noteable mentions would be the integration with Snapcast for multi room audio. You can use the MPVCmdTemplate for this.\nThe default value is mpv --audio-device=%d --no-audio-display --pause %f --input-ipc-server=%s.\nSymbol Meaning %s Path to IPC server socket %d Audio device (see above) %f Path to file to play To integrate with Snapcast alter the template:\nMPVCmdTemplate = \"mpv --no-audio-display --pause %f --input-ipc-server=%s --audio-channels=stereo --audio-samplerate=48000 --audio-format=s16 --ao=pcm --ao-pcm-file=/tmp/snapfifo\" This assumes Snapcast is running on the same machine as Navidrome. Check the Snapcast documentation for details.\nUsage Once Jukebox mode is enabled and configured, to start playing music through your servers speakers you’ll need to download a third-party Subsonic client. This client acts as a remote control. Not all Subsonic clients support Jukebox mode and you’ll need to check that your client supports this feature.\nJukebox mode is currently not supported through the Navidrome Web UI.\nTroubleshooting If Jukebox mode is enabled one should see the message “Starting playback server” in the log. The number of detected audio devices and the device chosen will be given in the log as well:\nINFO[0000] Starting playback server\rINFO[0000] 4 audio devices found\rINFO[0000] Using default audio device: dac For further troubleshooting, set Navidrome’s loglevel to DEBUG:\nLogLevel = 'DEBUG' ","categories":"","description":"Activate Navidrome's Jukebox mode\n","excerpt":"Activate Navidrome's Jukebox mode\n","ref":"/xuanyu/docs/usage/jukebox/","tags":"","title":"Jukebox mode"},{"body":"Music metadata Music metadata is derived from audio files via one of the two Extractors for the Scanner:\nTagLib ffmpeg The extractor used for scanning can be configured via configuration options using Scanner.Extractor.\nTagLib TagLib is the default extractor. It is faster at extracting but does not support as many file formats/audio coding formats as ffmpeg.\nFfmpeg You may want to try ffmpeg for extracting if you have files in your collection that are not supported by TagLib - see their official documentation for information on what is supported.\n","categories":"","description":"Information on the music metadata extractors used during scanning\n","excerpt":"Information on the music metadata extractors used during scanning\n","ref":"/xuanyu/docs/usage/extractors/","tags":"","title":"Metadata Extractors"},{"body":"Permissions You should NOT run Navidrome as root. Ideally you should have it running under its own user. Navidrome only needs read-only access to the Music Folder, and read-write permissions to the Data Folder.\nEncrypted passwords To be able to keep compatibility with the Subsonic API and its clients, Navidrome needs to store user’s passwords in its database. By default, Navidrome encrypts the passwords in the DB with a shared encryption key, just for the sake of obfuscation as this key can be easily found in the codebase.\nThis key can be overridden by the config option PasswordEncryptionKey. Once this option is set and Navidrome is restarted, it will re-encrypt all passwords with this new key. This is a one-time only configuration, and after this point the config option cannot be changed anymore or else users won’t be able to authenticate.\nNetwork configuration Even though Navidrome comes with an embedded, full-featured HTTP server, you should seriously consider running it behind a reverse proxy (Ex: Caddy, Nginx, Traefik, Apache) for added security, including setting up SSL. There are tons of good resources on the web on how to properly setup a reverse proxy.\nWhen using Navidrome in such configuration, you may want to prevent Navidrome from listening to all IPs configured in your computer, and only listen to localhost. This can be achieved by setting the Address flag to localhost\nReverse proxy authentication When reverse proxy authentication is used, the verification is done by another system. By checking a specific HTTP header, Navidrome assumes you are already authenticated. This header can be configured via ReverseProxyUserHeader configuration option. By default, the Remote-User header is used.\nBy default, Navidrome denies every attempt. Authentication proxy needs to be whitelisted in CIDR format, using ReverseProxyWhitelist. Both IPv4 and IPv6 are supported.\nNOTE: if you are listening on a UNIX socket, Navidrome will allow any connection to authenticate, as there is no remote IP exposed. Make sure to properly protect the socket with user access controls.\nIf you enable this feature and use a Subsonic client, you must whitelist the Subsonic API URL, as this authentication method is incompatible with the Subsonic authentication. You will need to whitelist the /rest/* URLs.\nIf a user is successfully authenticated by the proxy, but it does not exist in the Navidrome DB, it will be created with a random password. The user can change this password if they plan to use a Subsonic client.\nIf you plan to use the Sharing option, where you can create unauthenticated links to parts of your library, you’ll need to whitelist /share/* URLs.\nTranscoding configuration To configure transcoding, Navidrome’s WebUI provide a screen that allows you to edit existing transcoding configurations and to add new ones. That is similar to other music servers available in the market that provide transcoding on-demand.\nThe issue with this is that it potentially allows an attacker to run any command in your server. This married with the fact that some Navidrome installations don’t use SSL and/or run it as a super-user (root or Administrator), is a recipe for disaster!\nIn an effort to make Navidrome as secure as possible, we decided to disable the transcoding configuration editing in the UI by default. If you need to edit it (add or change a configuration), start Navidrome with the ND_ENABLETRANSCODINGCONFIG set to true. After doing your changes, don’t forget to remove this option or set it to false.\nLimit login attempts To protect against brute-force attacks, Navidrome is configured by default with a login rate limiter, It uses a Sliding Window algorithm to block too many consecutive login attempts. It is enabled by default and you don’t need to do anything. The rate limiter can be fine tuned using the flags AuthRequestLimit and AuthWindowLength and can be disabled by setting AuthRequestLimit to 0, though it is not recommended.\n","categories":"","description":"Information on how to making your installation more secure\n","excerpt":"Information on how to making your installation more secure\n","ref":"/xuanyu/docs/usage/security/","tags":"","title":"Security Considerations"},{"body":" Welcome to Goldydocs: A Docsy Example Project! Learn More Download Porridge temperature assessment — in the cloud!\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your porridge.\n(Sadly, Goldydocs isn’t a real project, but you can use this site as an example to create your own real websites with Docsy)\nNew chair metrics! The Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more\nFollow us on Twitter! For announcement of latest features etc.\nRead more\nThis is the second section\nDownload from AppStore Get the Goldydocs app!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more\nFollow us on Twitter! For announcement of latest features etc.\nRead more\nThis is the another section\n","categories":"","description":"","excerpt":" Welcome to Goldydocs: A Docsy Example Project! Learn More Download …","ref":"/xuanyu/","tags":"","title":"Goldydocs"},{"body":"Album cover art is not showing up This issue was fixed in version 0.15.0, please upgrade!\nYou don’t see any artwork in Navidrome’s UI and in any Subsonic clients, and you are getting errors in the logs like this:\npanic: runtime error: invalid memory address or nil pointer dereference\r-\u003e github.com/djherbis/fscache.(*handleCounter).inc\r-\u003e /go/pkg/mod/github.com/djherbis/fscache@v0.10.0/fscache.go:327\rgithub.com/djherbis/fscache.(*FSCache).newFile\r/go/pkg/mod/github.com/djherbis/fscache@v0.10.0/fscache.go:227\rgithub.com/djherbis/fscache.(*FSCache).Get\r/go/pkg/mod/github.com/djherbis/fscache@v0.10.0/fscache.go:154\rgithub.com/navidrome/navidrome/engine.(*cover).Get\r/github/workspace/engine/cover.go:50 This is being caused by a bug, and we are already working on a fix for it. In the meantime, you can fix the issue by disabling Navidrome’s image cache.\nTo solve this, simply set ND_IMAGECACHESIZE=0 in your configuration and restart Navidrome. You should see the warning message Image cache disabled during startup, confirming the configuration was effective. You should now be able to see the album cover arts.\nNote: This option is only available in Navidrome version 0.14.4 and above.\n","categories":"","description":"Solutions for common issues\n","excerpt":"Solutions for common issues\n","ref":"/xuanyu/docs/usage/troubleshooting/","tags":"","title":"Troubleshooting"},{"body":"","categories":"","description":"","excerpt":"","ref":"/xuanyu/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/xuanyu/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/xuanyu/tags/","tags":"","title":"Tags"}]